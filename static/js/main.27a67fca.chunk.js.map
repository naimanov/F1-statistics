{"version":3,"sources":["actions.js","reducer.js","context/tableContext.js","context/globalContext.js","components/Table.js","components/SwitchButtons.js","components/ErrorFetch.js","components/Loading.js","pages/Standings.js","components/Navbar.js","context/MockDataSeasons.js","components/SelectSeason.js","pages/Schedule.js","pages/Error.js","pages/Races.js","components/QualifyingError.js","pages/RaceResults.js","App.js","index.js"],"names":["SET_DRIVERS_STANDINGS","SET_CONSTRUCTORS_STANDINGS","SET_RACES_SCHEDULE","SET_RACES_RESULT","SET_SINGLE_RACE_RESULT","SET_QUALIFYING","SWITCH_TABLE_TYPE","START_LOADING","END_LOADING","FETCH_ERROR","reducer","state","action","type","is_loading","is_error","driverData","payload","MRData","StandingsTable","StandingsLists","DriverStandings","map","obj","position","points","Driver","givenName","familyName","driverName","constructor","Constructors","name","table_title","table_type","table_headings","table_data","constructorData","ConstructorStandings","Constructor","nationality","racesData","RaceTable","Races","round","raceName","date","circuitName","Circuit","country","Location","racesResultData","Results","winner","raceTitle","singleRaceData","grid","laps","status","driver","time","Time","qualifyingTitle","qualifyingData","QualifyingResults","q1","Q1","q2","Q2","q3","Q3","Error","initialState","TableContext","React","createContext","TableProvider","children","useReducer","dispatch","fetchStatisticsData","useCallback","query","a","fetch","response","json","data","Provider","value","switchTableType","tableType","GlobalContext","GlobalProvider","useState","isModalOpen","setIsModalOpen","isMenuOpen","setIsMenuOpen","season","setSeason","openModal","closeModal","choiceSeason","toogleMenu","closeMenu","Table","tableData","tableHeadings","isMessageShow","setIsMessageShow","tableWidthRef","useRef","tableContainerWidthRef","checkTableSize","tableWidth","current","getBoundingClientRect","width","tableContainerWidth","useEffect","window","addEventListener","removeEventListener","className","ref","tableHeading","uuid","tableRow","Object","keys","key","to","SwitchButtons","switchTypes","useContext","firstType","secondType","onClick","ErrorFetch","Loading","HomePage","tableTitle","isLoading","error","Navbar","seasons","SelectSeason","data-season","e","target","dataset","Schedule","QualifaingError","RaceResults","useParams","App","basename","process","exact","path","Standings","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.27a67fca.chunk.js","sourcesContent":["export const SET_DRIVERS_STANDINGS = 'SET_DRIVERS_STANDING';\r\nexport const SET_CONSTRUCTORS_STANDINGS = 'SET_CONSTRUCTORS_STANDINGS';\r\nexport const SET_RACES_SCHEDULE = 'SET_RACES_SCHEDULE';\r\nexport const SET_RACES_RESULT = 'SET_RACES_RESULT';\r\nexport const SET_SINGLE_RACE_RESULT = 'SET_SINGLE_RACE_RESULT';\r\nexport const SET_QUALIFYING = 'SET_QUALIFYING';\r\nexport const SWITCH_TABLE_TYPE = 'SWITCH_TABLE_TYPE';\r\nexport const START_LOADING = 'START_LOADING';\r\nexport const END_LOADING = 'END_LOADING';\r\nexport const FETCH_ERROR = 'FETCH_ERROR';\r\n","import {\r\n  SET_DRIVERS_STANDINGS,\r\n  SET_CONSTRUCTORS_STANDINGS,\r\n  SET_RACES_SCHEDULE,\r\n  SET_RACES_RESULT,\r\n  SET_SINGLE_RACE_RESULT,\r\n  SET_QUALIFYING,\r\n  SWITCH_TABLE_TYPE,\r\n  START_LOADING,\r\n  END_LOADING,\r\n  FETCH_ERROR,\r\n} from './actions';\r\n\r\nconst reducer = (state, action) => {\r\n  switch (action.type) {\r\n    case START_LOADING:\r\n      return { ...state, is_loading: true, is_error: false };\r\n\r\n    case END_LOADING:\r\n      return { ...state, is_loading: false };\r\n\r\n    case FETCH_ERROR:\r\n      return { ...state, is_error: true };\r\n\r\n    case SET_DRIVERS_STANDINGS:\r\n      const driverStandings =\r\n        action.payload.MRData.StandingsTable.StandingsLists[0].DriverStandings;\r\n      const driverData = driverStandings.map((obj) => {\r\n        const { position, points } = obj;\r\n        const { givenName, familyName } = obj.Driver;\r\n        const driverName = `${givenName} ${familyName}`;\r\n        const constructor = obj.Constructors[0].name;\r\n        const driver = {\r\n          position,\r\n          driverName,\r\n          constructor,\r\n          points,\r\n        };\r\n        return driver;\r\n      });\r\n      return {\r\n        ...state,\r\n        table_title: 'Drivers standings',\r\n        table_type: 'drivers',\r\n        table_headings: ['Pos', 'Driver', 'Constructor', 'Points'],\r\n        table_data: driverData,\r\n      };\r\n\r\n    case SET_CONSTRUCTORS_STANDINGS:\r\n      const constructorStandings =\r\n        action.payload.MRData.StandingsTable.StandingsLists[0]\r\n          .ConstructorStandings;\r\n      const constructorData = constructorStandings.map((obj) => {\r\n        const { position, points } = obj;\r\n        const { name, nationality } = obj.Constructor;\r\n        const constructor = {\r\n          position,\r\n          name,\r\n          nationality,\r\n          points,\r\n        };\r\n        return constructor;\r\n      });\r\n      return {\r\n        ...state,\r\n        table_title: 'Constructors standings',\r\n        table_type: 'constructors',\r\n        table_headings: ['Pos', 'Constructor', 'Nationality', 'Points'],\r\n        table_data: constructorData,\r\n      };\r\n\r\n    case SET_RACES_SCHEDULE:\r\n      const raceSchedule = action.payload.MRData.RaceTable.Races;\r\n      const racesData = raceSchedule.map((obj) => {\r\n        const { round, raceName, date } = obj;\r\n        const { circuitName } = obj.Circuit;\r\n        const { country } = obj.Circuit.Location;\r\n        const race = {\r\n          round,\r\n          raceName,\r\n          circuitName,\r\n          country,\r\n          date,\r\n        };\r\n        return race;\r\n      });\r\n      return {\r\n        ...state,\r\n        table_title: 'Schedule',\r\n        table_type: 'schedule',\r\n        table_headings: ['Round', 'Race', 'Circuit', 'Country', 'Date'],\r\n        table_data: racesData,\r\n      };\r\n\r\n    case SET_RACES_RESULT:\r\n      const racesList = action.payload.MRData.RaceTable.Races;\r\n      const racesResultData = racesList.map((obj) => {\r\n        const { round, raceName } = obj;\r\n        const { givenName, familyName } = obj.Results[0].Driver;\r\n        const winner = `${givenName} ${familyName}`;\r\n        const race = {\r\n          round,\r\n          raceName,\r\n          winner,\r\n        };\r\n        return race;\r\n      });\r\n      return {\r\n        ...state,\r\n        table_title: 'Races results',\r\n        table_type: 'racesList',\r\n        table_headings: ['Round', 'Race', 'Winner', ' '],\r\n        table_data: racesResultData,\r\n      };\r\n\r\n    case SET_SINGLE_RACE_RESULT:\r\n      const raceTitle = action.payload.MRData.RaceTable.Races[0].raceName;\r\n      const singleRace = action.payload.MRData.RaceTable.Races[0].Results;\r\n      const singleRaceData = singleRace.map((obj) => {\r\n        const { position, points, grid, laps, status } = obj;\r\n        const { givenName, familyName } = obj.Driver;\r\n        const driver = `${givenName} ${familyName}`;\r\n        const constructor = obj.Constructor.name;\r\n        // checking time property\r\n        let time = obj.Time?.time ?? null;\r\n\r\n        const race = {\r\n          position,\r\n          driver,\r\n          constructor,\r\n          laps,\r\n          grid,\r\n          time,\r\n          status,\r\n          points,\r\n        };\r\n        return race;\r\n      });\r\n      return {\r\n        ...state,\r\n        table_title: raceTitle,\r\n        table_type: 'race',\r\n        table_headings: [\r\n          'Pos',\r\n          'Driver',\r\n          'Constructor',\r\n          'Laps',\r\n          'Grid',\r\n          'Time',\r\n          'Status',\r\n          'Points',\r\n        ],\r\n        table_data: singleRaceData,\r\n      };\r\n\r\n    case SET_QUALIFYING:\r\n      const qualifyingTitle = action.payload.MRData.RaceTable.Races[0].raceName;\r\n      const qualifying =\r\n        action.payload.MRData.RaceTable.Races[0].QualifyingResults;\r\n      const qualifyingData = qualifying.map((obj) => {\r\n        const { position } = obj;\r\n        const { givenName, familyName } = obj.Driver;\r\n        const driver = `${givenName} ${familyName}`;\r\n        const constructor = obj.Constructor.name;\r\n        // checking qualifying time properties\r\n        let q1 = obj.Q1 ?? null;\r\n        let q2 = obj.Q2 ?? null;\r\n        let q3 = obj.Q3 ?? null;\r\n\r\n        const singleQualifying = {\r\n          position,\r\n          driver,\r\n          constructor,\r\n          q1,\r\n          q2,\r\n          q3,\r\n        };\r\n        return singleQualifying;\r\n      });\r\n      return {\r\n        ...state,\r\n        table_title: qualifyingTitle,\r\n        table_type: 'qualifying',\r\n        table_headings: ['Pos', 'Driver', 'Constructor', 'Q1', 'Q2', 'Q3'],\r\n        table_data: qualifyingData,\r\n      };\r\n\r\n    case SWITCH_TABLE_TYPE:\r\n      return { ...state, table_type: action.payload };\r\n\r\n    default:\r\n      throw new Error(`No Matching \"${action.type}\" - action type`);\r\n  }\r\n};\r\n\r\nexport default reducer;\r\n","import React, { useReducer, useCallback } from 'react';\r\nimport {\r\n  SWITCH_TABLE_TYPE,\r\n  START_LOADING,\r\n  END_LOADING,\r\n  FETCH_ERROR,\r\n} from '../actions';\r\n\r\nimport reducer from '../reducer';\r\n\r\nconst rootUrl = 'https://ergast.com/api/f1';\r\n\r\nconst initialState = {\r\n  table_title: '',\r\n  table_type: '',\r\n  table_headings: [],\r\n  table_data: [],\r\n  is_loading: true,\r\n  is_error: false,\r\n};\r\n\r\nconst TableContext = React.createContext();\r\n\r\nconst TableProvider = ({ children }) => {\r\n  const [state, dispatch] = useReducer(reducer, initialState);\r\n\r\n  const fetchStatisticsData = useCallback(async (query, action) => {\r\n    dispatch({ type: START_LOADING });\r\n    try {\r\n      const response = await fetch(`${rootUrl}/${query}`);\r\n      const data = await response.json();\r\n      if (data) {\r\n        dispatch({ type: action, payload: data });\r\n      }\r\n    } catch (error) {\r\n      dispatch({ type: FETCH_ERROR });\r\n    }\r\n    dispatch({ type: END_LOADING });\r\n  }, []);\r\n\r\n  const switchTableType = (tableType) => {\r\n    dispatch({ type: SWITCH_TABLE_TYPE, payload: tableType });\r\n  };\r\n\r\n  return (\r\n    <TableContext.Provider\r\n      value={{\r\n        ...state,\r\n        fetchStatisticsData,\r\n        switchTableType,\r\n      }}\r\n    >\r\n      {children}\r\n    </TableContext.Provider>\r\n  );\r\n};\r\n\r\nexport { TableContext, TableProvider };\r\n","import React, { useState } from 'react';\r\n\r\nconst GlobalContext = React.createContext();\r\n\r\nconst GlobalProvider = ({ children }) => {\r\n  const [isModalOpen, setIsModalOpen] = useState(false);\r\n  const [isMenuOpen, setIsMenuOpen] = useState(false);\r\n  const [season, setSeason] = useState('2021');\r\n\r\n  const openModal = () => {\r\n    setIsModalOpen(true);\r\n    setIsMenuOpen(false);\r\n  };\r\n\r\n  const closeModal = () => {\r\n    setIsModalOpen(false);\r\n  };\r\n\r\n  const choiceSeason = (season) => {\r\n    setSeason(season);\r\n    setIsModalOpen(false);\r\n  };\r\n\r\n  const toogleMenu = () => {\r\n    setIsMenuOpen(!isMenuOpen);\r\n  };\r\n\r\n  const closeMenu = () => {\r\n    setIsMenuOpen(false);\r\n  };\r\n\r\n  return (\r\n    <GlobalContext.Provider\r\n      value={{\r\n        isModalOpen,\r\n        isMenuOpen,\r\n        season,\r\n        setIsModalOpen,\r\n        setSeason,\r\n        openModal,\r\n        closeModal,\r\n        choiceSeason,\r\n        toogleMenu,\r\n        closeMenu,\r\n      }}\r\n    >\r\n      {children}\r\n    </GlobalContext.Provider>\r\n  );\r\n};\r\n\r\nexport { GlobalContext, GlobalProvider };\r\n","import React, { useRef, useEffect, useState } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport uuid from 'react-uuid';\r\n\r\nfunction Table({ tableData, tableType, tableHeadings }) {\r\n  const [isMessageShow, setIsMessageShow] = useState(false);\r\n\r\n  const tableWidthRef = useRef(null);\r\n  const tableContainerWidthRef = useRef(null);\r\n\r\n  const checkTableSize = () => {\r\n    const tableWidth = tableWidthRef.current.getBoundingClientRect().width;\r\n    const tableContainerWidth = tableContainerWidthRef.current.getBoundingClientRect()\r\n      .width;\r\n    if (tableWidth > tableContainerWidth) {\r\n      setIsMessageShow(true);\r\n    } else {\r\n      setIsMessageShow(false);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    checkTableSize();\r\n    window.addEventListener('resize', checkTableSize);\r\n    return () => {\r\n      window.removeEventListener('resize', checkTableSize);\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      {isMessageShow && (\r\n        <p className='scroll-message'>&lt;Scroll to see more&gt;</p>\r\n      )}\r\n      <section className='table-container' ref={tableContainerWidthRef}>\r\n        <table className='table' ref={tableWidthRef}>\r\n          <thead>\r\n            <tr>\r\n              {tableHeadings.map((tableHeading) => {\r\n                return (\r\n                  <th key={uuid()} className='table-headings'>\r\n                    {tableHeading}\r\n                  </th>\r\n                );\r\n              })}\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {tableData.map((tableRow) => {\r\n              return (\r\n                <tr key={uuid()}>\r\n                  {Object.keys(tableRow).map((key) => {\r\n                    return (\r\n                      <td key={uuid()} className='table-cell'>\r\n                        {tableRow[key]}\r\n                      </td>\r\n                    );\r\n                  })}\r\n                  {/* for Races page   */}\r\n                  {tableType === 'racesList' ? (\r\n                    <td key={uuid()}>\r\n                      <Link\r\n                        to={`/single-race/${tableRow.round}`}\r\n                        className='btn-link'\r\n                      >\r\n                        See more\r\n                      </Link>\r\n                    </td>\r\n                  ) : null}\r\n                </tr>\r\n              );\r\n            })}\r\n          </tbody>\r\n        </table>\r\n      </section>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Table;\r\n","import React, { useContext } from 'react';\r\nimport { TableContext } from '../context/tableContext';\r\n\r\nfunction SwitchButtons({ switchTypes }) {\r\n  const { switchTableType, table_type: tableType } = useContext(TableContext);\r\n\r\n  const [firstType, secondType] = switchTypes;\r\n\r\n  return (\r\n    <div className='btn-switch-container'>\r\n      <button\r\n        className={`${\r\n          tableType === firstType\r\n            ? 'btn btn-switch btn-switch-active'\r\n            : 'btn btn-switch'\r\n        }`}\r\n        onClick={() => switchTableType(firstType)}\r\n      >\r\n        {firstType}\r\n      </button>\r\n      <button\r\n        className={`${\r\n          tableType === secondType\r\n            ? 'btn btn-switch btn-switch-active'\r\n            : 'btn btn-switch'\r\n        }`}\r\n        onClick={() => switchTableType(secondType)}\r\n      >\r\n        {secondType}\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SwitchButtons;\r\n","import React from 'react';\r\n\r\nfunction ErrorFetch() {\r\n  return (\r\n    <div className='message-container'>\r\n      <p className='message'>There was an error...</p>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ErrorFetch;\r\n","import React from 'react';\r\n\r\nfunction Loading() {\r\n  return (\r\n    <div className='loading-container'>\r\n      <div className='loading'></div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Loading;\r\n","import React, { useEffect, useContext } from 'react';\r\nimport Table from '../components/Table';\r\nimport { TableContext } from '../context/tableContext';\r\nimport SwitchButtons from '../components/SwitchButtons';\r\nimport ErrorFetch from '../components/ErrorFetch';\r\nimport Loading from '../components/Loading';\r\nimport { GlobalContext } from '../context/globalContext';\r\nimport { SET_DRIVERS_STANDINGS, SET_CONSTRUCTORS_STANDINGS } from '../actions';\r\n\r\nconst HomePage = () => {\r\n  const { season } = useContext(GlobalContext);\r\n\r\n  const {\r\n    fetchStatisticsData,\r\n    table_title: tableTitle,\r\n    table_type: tableType,\r\n    table_headings: tableHeadings,\r\n    table_data: tableData,\r\n    is_loading: isLoading,\r\n    is_error: error,\r\n  } = useContext(TableContext);\r\n\r\n  useEffect(() => {\r\n    if (tableType === 'constructors' && season >= 1958) {\r\n      fetchStatisticsData(\r\n        `${season}/constructorStandings.json`,\r\n        SET_CONSTRUCTORS_STANDINGS\r\n      );\r\n    } else {\r\n      fetchStatisticsData(\r\n        `${season}/driverStandings.json`,\r\n        SET_DRIVERS_STANDINGS\r\n      );\r\n    }\r\n  }, [tableType, season, fetchStatisticsData]);\r\n\r\n  if (isLoading) {\r\n    return <Loading />;\r\n  }\r\n\r\n  if (error) {\r\n    return <ErrorFetch />;\r\n  }\r\n\r\n  return (\r\n    <main>\r\n      <div className='wrapper'>\r\n        <div className='table-wrapper'>\r\n          <div className='table-header'>\r\n            <h1 className='table-title'>{tableTitle}</h1>\r\n            {season >= 1958 ? (\r\n              <SwitchButtons switchTypes={['drivers', 'constructors']} />\r\n            ) : null}\r\n          </div>\r\n          <Table tableData={tableData} tableHeadings={tableHeadings} />\r\n        </div>\r\n      </div>\r\n    </main>\r\n  );\r\n};\r\nexport default HomePage;\r\n","import React, { useContext } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { GlobalContext } from '../context/globalContext';\r\nimport { FaBars } from 'react-icons/fa';\r\n\r\nfunction Navbar() {\r\n  const { openModal, season, toogleMenu, isMenuOpen, closeMenu } = useContext(\r\n    GlobalContext\r\n  );\r\n\r\n  return (\r\n    <header className='header'>\r\n      <div className='navbar-wrapper'>\r\n        <div>\r\n          <Link to='/' className='logo'>\r\n            F1\r\n          </Link>\r\n        </div>\r\n        <nav className={`${isMenuOpen ? 'navbar navbar-open' : 'navbar'}`}>\r\n          <ul className='navbar-menu'>\r\n            <li>\r\n              <Link to='/' className='navbar-link'>\r\n                <span onClick={closeMenu}>Standings</span>\r\n              </Link>\r\n            </li>\r\n            <li>\r\n              <Link to='/schedule' className='navbar-link'>\r\n                <span onClick={closeMenu}>Schedule</span>\r\n              </Link>\r\n            </li>\r\n            <li>\r\n              <Link to='/races' className='navbar-link'>\r\n                <span onClick={closeMenu}>Races</span>\r\n              </Link>\r\n            </li>\r\n          </ul>\r\n        </nav>\r\n        <button className='btn btn-season' onClick={openModal}>\r\n          Season: {season}\r\n        </button>\r\n        <button\r\n          className={`${\r\n            isMenuOpen ? 'btn nav-toggle nav-toggle-open' : 'btn nav-toggle'\r\n          }`}\r\n          onClick={toogleMenu}\r\n        >\r\n          <FaBars />\r\n        </button>\r\n      </div>\r\n    </header>\r\n  );\r\n}\r\n\r\nexport default Navbar;\r\n","const seasons = [\r\n  1950,\r\n  1951,\r\n  1952,\r\n  1953,\r\n  1954,\r\n  1955,\r\n  1956,\r\n  1957,\r\n  1958,\r\n  1959,\r\n  1960,\r\n  1961,\r\n  1962,\r\n  1963,\r\n  1964,\r\n  1965,\r\n  1966,\r\n  1967,\r\n  1968,\r\n  1969,\r\n  1970,\r\n  1971,\r\n  1972,\r\n  1973,\r\n  1974,\r\n  1975,\r\n  1976,\r\n  1977,\r\n  1978,\r\n  1979,\r\n  1980,\r\n  1981,\r\n  1982,\r\n  1983,\r\n  1984,\r\n  1985,\r\n  1986,\r\n  1987,\r\n  1988,\r\n  1989,\r\n  1990,\r\n  1991,\r\n  1992,\r\n  1993,\r\n  1994,\r\n  1995,\r\n  1996,\r\n  1997,\r\n  1998,\r\n  1999,\r\n  2000,\r\n  2001,\r\n  2002,\r\n  2003,\r\n  2004,\r\n  2005,\r\n  2006,\r\n  2007,\r\n  2008,\r\n  2009,\r\n  2010,\r\n  2011,\r\n  2012,\r\n  2013,\r\n  2014,\r\n  2015,\r\n  2016,\r\n  2017,\r\n  2018,\r\n  2019,\r\n  2020,\r\n  2021,\r\n];\r\n\r\nexport default seasons;\r\n","import React, { useContext } from 'react';\r\nimport seasons from '../context/MockDataSeasons';\r\nimport { RiCloseLine } from 'react-icons/ri';\r\nimport { GlobalContext } from '../context/globalContext';\r\nimport uuid from 'react-uuid';\r\n\r\nfunction SelectSeason() {\r\n  const { isModalOpen, closeModal, choiceSeason } = useContext(GlobalContext);\r\n\r\n  return (\r\n    <section>\r\n      <div\r\n        className={`${\r\n          isModalOpen ? 'modal-overlay modal-overlay-open' : 'modal-overlay'\r\n        }`}\r\n        onClick={closeModal}\r\n      ></div>\r\n      <div className={`${isModalOpen ? 'modal modal-open' : 'modal'}`}>\r\n        <div className='modal-title '>\r\n          <button className='btn modal-close-btn' onClick={closeModal}>\r\n            <RiCloseLine />\r\n          </button>\r\n\r\n          <h2>Seasons:</h2>\r\n        </div>\r\n        <div>\r\n          <ul className='season-container'>\r\n            {seasons.map((season) => {\r\n              return (\r\n                <li\r\n                  className='year'\r\n                  data-season={season}\r\n                  key={uuid()}\r\n                  onClick={(e) => choiceSeason(e.target.dataset.season)}\r\n                >\r\n                  {season}\r\n                </li>\r\n              );\r\n            })}\r\n          </ul>\r\n        </div>\r\n      </div>\r\n    </section>\r\n  );\r\n}\r\n\r\nexport default SelectSeason;\r\n","import React, { useContext, useEffect } from 'react';\r\nimport { TableContext } from '../context/tableContext';\r\nimport Table from '../components/Table';\r\nimport Loading from '../components/Loading';\r\nimport ErrorFetch from '../components/ErrorFetch';\r\nimport { GlobalContext } from '../context/globalContext';\r\nimport { SET_RACES_SCHEDULE } from '../actions';\r\n\r\nfunction Schedule() {\r\n  const { season } = useContext(GlobalContext);\r\n  const {\r\n    fetchStatisticsData,\r\n    table_title: tableTitle,\r\n    table_type: tableType,\r\n    table_headings: tableHeadings,\r\n    table_data: tableData,\r\n    is_loading: isLoading,\r\n    is_error: error,\r\n  } = useContext(TableContext);\r\n\r\n  useEffect(() => {\r\n    fetchStatisticsData(`${season}.json`, SET_RACES_SCHEDULE);\r\n  }, [tableType, season, fetchStatisticsData]);\r\n\r\n  if (isLoading) {\r\n    return <Loading />;\r\n  }\r\n\r\n  if (error) {\r\n    return <ErrorFetch />;\r\n  }\r\n\r\n  return (\r\n    <main>\r\n      <div className='wrapper'>\r\n        <div className='table-wrapper'>\r\n          <div className='table-header'>\r\n            <h1 className='table-title'>{tableTitle}</h1>\r\n          </div>\r\n          <Table tableData={tableData} tableHeadings={tableHeadings} />\r\n        </div>\r\n      </div>\r\n    </main>\r\n  );\r\n}\r\n\r\nexport default Schedule;\r\n","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nfunction Error() {\r\n  return (\r\n    <div className='message-container'>\r\n      <h1>404</h1>\r\n      <p className='message'>Sorry, the page you tried cannot be found</p>\r\n      <Link to='/' className='btn-message'>\r\n        Back home\r\n      </Link>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Error;\r\n","import React, { useContext, useEffect } from 'react';\r\nimport { TableContext } from '../context/tableContext';\r\nimport Table from '../components/Table';\r\nimport Loading from '../components/Loading';\r\nimport ErrorFetch from '../components/ErrorFetch';\r\nimport { GlobalContext } from '../context/globalContext';\r\nimport { SET_RACES_RESULT } from '../actions';\r\n\r\nfunction Races() {\r\n  const {\r\n    fetchStatisticsData,\r\n    table_title: tableTitle,\r\n    table_type: tableType,\r\n    table_headings: tableHeadings,\r\n    table_data: tableData,\r\n    is_loading: isLoading,\r\n    is_error: error,\r\n  } = useContext(TableContext);\r\n\r\n  const { season } = useContext(GlobalContext);\r\n\r\n  useEffect(() => {\r\n    fetchStatisticsData(`${season}/results/1.json`, SET_RACES_RESULT);\r\n  }, [tableType, season, fetchStatisticsData]);\r\n\r\n  if (isLoading) {\r\n    return <Loading />;\r\n  }\r\n\r\n  if (error) {\r\n    return <ErrorFetch />;\r\n  }\r\n\r\n  return (\r\n    <main>\r\n      <div className='wrapper'>\r\n        <div className='table-wrapper'>\r\n          <div className='table-header'>\r\n            <h1 className='table-title'>{tableTitle}</h1>\r\n          </div>\r\n          <Table\r\n            tableData={tableData}\r\n            tableHeadings={tableHeadings}\r\n            tableType={tableType}\r\n          />\r\n        </div>\r\n      </div>\r\n    </main>\r\n  );\r\n}\r\n\r\nexport default Races;\r\n","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nfunction QualifaingError() {\r\n  return (\r\n    <div className='message-container'>\r\n      <p className='message'>\r\n        Sorry, but qualifying results are only fully supported from the 2003\r\n        season onwards.\r\n      </p>\r\n      <Link to='/races' className='btn btn-message'>\r\n        Back to races\r\n      </Link>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default QualifaingError;\r\n","import React, { useContext, useEffect } from 'react';\r\nimport { TableContext } from '../context/tableContext';\r\nimport Table from '../components/Table';\r\nimport { GlobalContext } from '../context/globalContext';\r\nimport SwitchButtons from '../components/SwitchButtons';\r\nimport Loading from '../components/Loading';\r\nimport ErrorFetch from '../components/ErrorFetch';\r\nimport QualifaingError from '../components/QualifyingError';\r\nimport { useParams } from 'react-router-dom';\r\nimport { SET_SINGLE_RACE_RESULT, SET_QUALIFYING } from '../actions';\r\n\r\nfunction RaceResults() {\r\n  const { round } = useParams();\r\n  const {\r\n    fetchStatisticsData,\r\n    table_title: tableTitle,\r\n    table_type: tableType,\r\n    table_headings: tableHeadings,\r\n    table_data: tableData,\r\n    is_loading: isLoading,\r\n    is_error: error,\r\n  } = useContext(TableContext);\r\n\r\n  const { season } = useContext(GlobalContext);\r\n\r\n  useEffect(() => {\r\n    if (tableType === 'qualifying' && season >= 2003) {\r\n      fetchStatisticsData(`${season}/${round}/qualifying.json`, SET_QUALIFYING);\r\n    } else if (tableType === 'qualifying' && season < 2003) {\r\n      return;\r\n    } else {\r\n      fetchStatisticsData(\r\n        `${season}/${round}/results.json`,\r\n        SET_SINGLE_RACE_RESULT\r\n      );\r\n    }\r\n  }, [tableType, season, round, fetchStatisticsData]);\r\n\r\n  if (isLoading) {\r\n    return <Loading />;\r\n  }\r\n\r\n  if (error) {\r\n    return <ErrorFetch />;\r\n  }\r\n\r\n  if (tableType === 'qualifying' && season < 2003) {\r\n    return <QualifaingError />;\r\n  }\r\n\r\n  return (\r\n    <main>\r\n      <div className='wrapper'>\r\n        <div className='table-wrapper'>\r\n          <section className='table-header'>\r\n            <h1 className='table-title'>{tableTitle}</h1>\r\n            {season >= 2003 ? (\r\n              <SwitchButtons switchTypes={['race', 'qualifying']} />\r\n            ) : null}\r\n          </section>\r\n          <Table\r\n            tableData={tableData}\r\n            tableHeadings={tableHeadings}\r\n            tableType={tableType}\r\n          />\r\n        </div>\r\n      </div>\r\n    </main>\r\n  );\r\n}\r\n\r\nexport default RaceResults;\r\n","import React from 'react';\nimport { TableProvider } from './context/tableContext';\nimport { GlobalProvider } from './context/globalContext';\nimport Standings from './pages/Standings';\nimport Navbar from './components/Navbar';\nimport SelectSeason from './components/SelectSeason';\nimport Schedule from './pages/Schedule';\nimport Error from './pages/Error';\nimport Races from './pages/Races';\nimport RaceResults from './pages/RaceResults';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\n\nfunction App() {\n  return (\n    <>\n      <GlobalProvider>\n        <Router basename={process.env.PUBLIC_URL}>\n          <SelectSeason />\n          <Navbar />\n          <TableProvider>\n            <Switch>\n              <Route exact path='/'>\n                <Standings />\n              </Route>\n              <Route path='/schedule'>\n                <Schedule />\n              </Route>\n              <Route path='/races'>\n                <Races />\n              </Route>\n              <Route path='/single-race/:round'>\n                <RaceResults />\n              </Route>\n              <Route path='*'>\n                <Error />\n              </Route>\n            </Switch>\n          </TableProvider>\n        </Router>\n      </GlobalProvider>\n    </>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}